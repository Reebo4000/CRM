version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:15-alpine
    container_name: gemini-crm-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: gemini_crm_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Reebo@2004
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/database-init:/docker-entrypoint-initdb.d
    networks:
      - gemini-crm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gemini_crm_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend Service for Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gemini-crm-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: gemini_crm_prod
      DB_USER: postgres
      DB_PASSWORD: Reebo@2004
      JWT_SECRET: prod-jwt-secret-key-change-this-in-real-production-2024-secure
      JWT_EXPIRES_IN: 8h
      API_RATE_LIMIT_WINDOW_MS: 900000
      API_RATE_LIMIT_MAX_REQUESTS: 100
      CORS_ORIGIN: http://localhost
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 5242880
      ALLOWED_FILE_TYPES: image/jpeg,image/png,image/webp
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_SECURE: false
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-app-password
      NOTIFICATION_EMAIL_FROM: noreply@geminicrm.com
      LOG_LEVEL: warn
      TRUST_PROXY: true
    volumes:
      - backend_uploads_prod:/app/uploads
    networks:
      - gemini-crm-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend Service for Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gemini-crm-frontend-prod
    restart: always
    ports:
      - "80:80"
    networks:
      - gemini-crm-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Redis for Session Storage and Caching (Production)
  redis:
    image: redis:7-alpine
    container_name: gemini-crm-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
    networks:
      - gemini-crm-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service for Database
  backup:
    image: postgres:15-alpine
    container_name: gemini-crm-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: Reebo@2004
    volumes:
      - backup_data_prod:/backups
      - ./scripts:/scripts
    networks:
      - gemini-crm-network
    depends_on:
      - postgres
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U postgres -d gemini_crm_prod > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Monitoring with Watchtower (Auto-updates)
  watchtower:
    image: containrrr/watchtower
    container_name: gemini-crm-watchtower-prod
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 86400
      WATCHTOWER_INCLUDE_STOPPED: true
    command: --interval 86400 --cleanup
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_uploads_prod:
    driver: local
  backup_data_prod:
    driver: local

networks:
  gemini-crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
