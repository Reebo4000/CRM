const { toArabicNumerals } = require('./pdfArabicUtils');

/**
 * Arabic translations for PDF content
 */
const arabicTranslations = {
  'Analytics Report': 'تقرير التحليلات',
  'Gemini CRM': 'CRM',
  'Women\'s Bag Store Management System': 'نظام إدارة متجر حقائب النساء',
  'Report Period': 'فترة التقرير',
  'Generated on': 'تم إنشاؤه في',
  'Key Metrics': 'المقاييس الرئيسية',
  'Total Revenue': 'إجمالي الإيرادات',
  'Total Orders': 'إجمالي الطلبات',
  'Total Customers': 'إجمالي العملاء',
  'Average Order Value': 'متوسط قيمة الطلب',
  'Recent Orders': 'الطلبات الأخيرة',
  'Order ID': 'رقم الطلب',
  'Customer': 'العميل',
  'Date': 'التاريخ',
  'Items': 'العناصر',
  'Amount': 'المبلغ',
  'Status': 'الحالة',
  'Customer Analytics': 'تحليلات العملاء',
  'New Customers (Last 30 days)': 'عملاء جدد (آخر 30 يوم)',
  'Product Analytics': 'تحليلات المنتجات',
  'Total Products': 'إجمالي المنتجات',
  'Low Stock Products': 'منتجات مخزون منخفض',
  'Out of Stock Products': 'منتجات نفدت من المخزون',
  'Page': 'صفحة',
  'of': 'من',
  'Generated by Gemini CRM System': 'تم إنشاؤه بواسطة نظام CRM',
  'pending': 'قيد الانتظار',
  'processing': 'قيد المعالجة',
  'shipped': 'تم الشحن',
  'delivered': 'تم التسليم',
  'cancelled': 'ملغي',
  "completed": 'مكتمل',

  // Growth and trends
  'Growth Analysis': 'تحليل النمو',
  'Revenue Growth': 'نمو الإيرادات',
  'Orders Growth': 'نمو الطلبات',
  'Previous Period': 'الفترة السابقة',
  'Current Period': 'الفترة الحالية',
  'Growth Rate': 'معدل النمو',

  // Sales trends
  'Sales Trends': 'اتجاهات المبيعات',
  'Daily Revenue': 'الإيرادات اليومية',
  'Order Status Distribution': 'توزيع حالة الطلبات',

  // Top performers
  'Top Performing Products': 'أفضل المنتجات أداءً',
  'Product Name': 'اسم المنتج',
  'Category': 'الفئة',
  'Units Sold': 'الوحدات المباعة',
  'Revenue': 'الإيرادات',
  'Stock': 'المخزون',

  // Category performance
  'Category Performance': 'أداء الفئات',
  'Products Count': 'عدد المنتجات',
  'Total Sold': 'إجمالي المبيعات',

  // Customer insights
  'Top Customers': 'أفضل العملاء',
  'Customer Name': 'اسم العميل',
  'Orders Count': 'عدد الطلبات',
  'Total Spent': 'إجمالي الإنفاق',
  'Email': 'البريد الإلكتروني',

  // Inventory alerts
  'Inventory Alerts': 'تنبيهات المخزون',
  'Low Stock Items': 'عناصر المخزون المنخفض',
  'Price': 'السعر',
  'Stock Quantity': 'كمية المخزون',

  // Performance indicators
  'Performance Indicators': 'مؤشرات الأداء',
  'vs Previous Period': 'مقارنة بالفترة السابقة',
  'Increase': 'زيادة',
  'Decrease': 'انخفاض',
  'No Change': 'لا تغيير',
  'Strong Growth': 'نمو قوي',
  'Needs Attention': 'يحتاج انتباه',
  'Stable Performance': 'أداء مستقر',
  'Performance Insights': 'رؤى الأداء',
  'Out of Stock': 'نفد من المخزون',
  'Low Stock': 'مخزون منخفض',
  'Normal': 'عادي',

  // Orders section
  'All Orders': 'جميع الطلبات',
  'orders': 'طلبات',
  'order': 'طلب'
};

/**
 * Get translated text
 */
const getTranslatedText = (text, language) => {
  if (language === 'ar' && arabicTranslations[text]) {
    return arabicTranslations[text];
  }
  return text;
};

/**
 * Format currency for display
 */
const formatCurrency = (amount, language) => {
  const formatted = `${parseFloat(amount || 0).toFixed(2)} ج م`;
  return language === 'ar' ? toArabicNumerals(formatted) : formatted;
};

/**
 * Format number for display
 */
const formatNumber = (number, language) => {
  const formatted = (number || 0).toString();
  return language === 'ar' ? toArabicNumerals(formatted) : formatted;
};

/**
 * Format date for display
 */
const formatDate = (date, language) => {
  const formatted = new Date(date).toLocaleDateString('en-US');
  return language === 'ar' ? toArabicNumerals(formatted) : formatted;
};

/**
 * Generate CSS styles for the PDF
 */
const generateCSS = (language) => {
  const isArabic = language === 'ar';
  const direction = isArabic ? 'rtl' : 'ltr';
  const textAlign = isArabic ? 'right' : 'left';
  
  return `
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@400;600;700&family=Inter:wght@400;500;600;700&display=swap');
      
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        font-family: ${isArabic ? "'Noto Sans Arabic', Arial, sans-serif" : "'Inter', Arial, sans-serif"};
        direction: ${direction};
        text-align: ${textAlign};
        line-height: 1.6;
        color: #1f2937;
        background: white;
        font-size: 14px;
      }
      
      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 40px;
      }
      
      .header {
        margin-bottom: 40px;
        border-bottom: 2px solid #e5e7eb;
        padding-bottom: 30px;
      }
      
      .company-name {
        font-size: 28px;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 8px;
      }
      
      .language-indicator {
        font-size: 14px;
        color: #6b7280;
        margin-bottom: 12px;
      }
      
      .subtitle {
        font-size: 16px;
        color: #6b7280;
        margin-bottom: 20px;
      }
      
      .report-title {
        font-size: 24px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 16px;
      }
      
      .report-info {
        font-size: 12px;
        color: #6b7280;
        line-height: 1.5;
      }
      
      .section {
        margin-bottom: 40px;
      }
      
      .section-title {
        font-size: 20px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 20px;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 8px;
      }
      
      .metrics-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 30px;
      }
      
      .metric-card {
        background: #f9fafb;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
      }
      
      .metric-label {
        font-size: 12px;
        color: #6b7280;
        margin-bottom: 8px;
        font-weight: 500;
      }
      
      .metric-value {
        font-size: 18px;
        font-weight: 600;
        color: #1f2937;
      }
      
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        overflow: hidden;
      }
      
      .table th {
        background: #f9fafb;
        padding: 12px;
        font-weight: 600;
        color: #374151;
        border-bottom: 1px solid #e5e7eb;
        font-size: 12px;
      }
      
      .table td {
        padding: 12px;
        border-bottom: 1px solid #f3f4f6;
        font-size: 11px;
        color: #374151;
      }
      
      .table tr:last-child td {
        border-bottom: none;
      }
      
      .table tr:nth-child(even) {
        background: #f9fafb;
      }
      
      .status {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 10px;
        font-weight: 500;
        text-transform: capitalize;
      }
      
      .status.pending { background: #fef3c7; color: #92400e; }
      .status.processing { background: #dbeafe; color: #1e40af; }
      .status.shipped { background: #d1fae5; color: #065f46; }
      .status.delivered { background: #dcfce7; color: #166534; }
      .status.cancelled { background: #fee2e2; color: #991b1b; }
      .status.completed { background: #d1fae5; color: #065f46; }
      
      .footer {
        margin-top: 60px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
        font-size: 10px;
        color: #9ca3af;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .growth-indicator {
        display: inline-flex;
        align-items: center;
        font-size: 12px;
        font-weight: 500;
        padding: 2px 6px;
        border-radius: 4px;
        margin-left: 8px;
      }

      .growth-positive {
        background: #dcfce7;
        color: #166534;
      }

      .growth-negative {
        background: #fee2e2;
        color: #991b1b;
      }

      .growth-neutral {
        background: #f3f4f6;
        color: #6b7280;
      }

      .chart-placeholder {
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        color: #6b7280;
        font-size: 12px;
        margin: 16px 0;
      }

      .insights-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 16px;
        margin: 20px 0;
      }

      .insight-card {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 16px;
      }

      .insight-title {
        font-size: 14px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 8px;
      }

      .insight-value {
        font-size: 20px;
        font-weight: 700;
        color: #059669;
        margin-bottom: 4px;
      }

      .insight-description {
        font-size: 11px;
        color: #6b7280;
      }

      .page-break {
        page-break-before: always;
      }

      @media print {
        body { font-size: 12px; }
        .container { padding: 20px; }
        .metrics-grid { grid-template-columns: repeat(2, 1fr); }
        .insights-grid { grid-template-columns: repeat(2, 1fr); }
      }
    </style>
  `;
};

/**
 * Generate HTML template for analytics report
 */
const generateAnalyticsHTML = (data, language = 'en') => {
  const {
    totalRevenue,
    totalOrders,
    totalCustomers,
    avgOrderValue,
    allOrders, // Changed from recentOrders to allOrders
    reportType,
    startDate,
    endDate,
    customerStats,
    newCustomersThisMonth,
    totalProducts,
    lowStockProducts,
    outOfStockProducts,
    // New comprehensive data
    previousRevenue,
    previousOrders,
    revenueGrowth,
    ordersGrowth,
    salesTrends,
    orderStatusDistribution,
    customerSegmentation,
    topProducts,
    categoryPerformance,
    inventoryAlerts
  } = data;

  const isArabic = language === 'ar';

  return `
    <!DOCTYPE html>
    <html lang="${isArabic ? 'ar' : 'en'}">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${getTranslatedText('Analytics Report', language)} - ${getTranslatedText('Gemini CRM', language)}</title>
      ${generateCSS(language)}
    </head>
    <body>
      <div class="container">
        <!-- Header -->
        <div class="header">
          <div class="company-name">${getTranslatedText('Gemini CRM', language)}</div>
          ${isArabic ? '<div class="language-indicator">(Arabic / العربية)</div>' : ''}
          <div class="subtitle">${getTranslatedText('Women\'s Bag Store Management System', language)}</div>
          <div class="report-title">${getTranslatedText('Analytics Report', language)}</div>
          <div class="report-info">
            <div>${getTranslatedText('Report Period', language)}: ${formatDate(startDate, language)} - ${formatDate(endDate, language)}</div>
            <div>${getTranslatedText('Generated on', language)}: ${formatDate(new Date(), language)}</div>
          </div>
        </div>

        <!-- Key Metrics -->
        <div class="section">
          <div class="section-title">${getTranslatedText('Key Metrics', language)}</div>
          <div class="metrics-grid">
            <div class="metric-card">
              <div class="metric-label">${getTranslatedText('Total Revenue', language)}</div>
              <div class="metric-value">
                ${formatCurrency(totalRevenue, language)}
                ${generateGrowthIndicator(revenueGrowth, language)}
              </div>
            </div>
            <div class="metric-card">
              <div class="metric-label">${getTranslatedText('Total Orders', language)}</div>
              <div class="metric-value">
                ${formatNumber(totalOrders || 0, language)}
                ${generateGrowthIndicator(ordersGrowth, language)}
              </div>
            </div>
            <div class="metric-card">
              <div class="metric-label">${getTranslatedText('Total Customers', language)}</div>
              <div class="metric-value">${formatNumber(totalCustomers || 0, language)}</div>
            </div>
            <div class="metric-card">
              <div class="metric-label">${getTranslatedText('Average Order Value', language)}</div>
              <div class="metric-value">${formatCurrency(avgOrderValue, language)}</div>
            </div>
          </div>
        </div>

        ${generateGrowthAnalysisSection(data, language)}
        ${generatePerformanceInsightsSection(data, language)}

        ${generateOrdersSection(allOrders, reportType, language)}
        ${generateCustomerSection(customerStats, newCustomersThisMonth, reportType, language, customerSegmentation)}
        ${generateProductSection(totalProducts, lowStockProducts, outOfStockProducts, reportType, language)}
        ${generateInventoryAlertsSection(inventoryAlerts, reportType, language)}

        <!-- Footer -->
        <div class="footer">
          <div>${getTranslatedText('Generated by Gemini CRM System', language)}</div>
          <div>${getTranslatedText('Page', language)} 1 ${getTranslatedText('of', language)} 1</div>
        </div>
      </div>
    </body>
    </html>
  `;
};

/**
 * Generate growth indicator
 */
const generateGrowthIndicator = (growthRate, language) => {
  if (!growthRate || growthRate === 0) return '';

  const isPositive = growthRate > 0;
  const isNegative = growthRate < 0;
  const className = isPositive ? 'growth-positive' : isNegative ? 'growth-negative' : 'growth-neutral';
  const symbol = isPositive ? '↗' : isNegative ? '↘' : '→';
  const formattedRate = formatNumber(Math.abs(growthRate).toFixed(1), language);

  return `<span class="growth-indicator ${className}">${symbol} ${formattedRate}%</span>`;
};

/**
 * Generate growth analysis section
 */
const generateGrowthAnalysisSection = (data, language) => {
  const { revenueGrowth, ordersGrowth, previousRevenue, previousOrders } = data;

  return `
    <div class="section">
      <div class="section-title">${getTranslatedText('Growth Analysis', language)}</div>
      <div class="insights-grid">
        <div class="insight-card">
          <div class="insight-title">${getTranslatedText('Revenue Growth', language)}</div>
          <div class="insight-value">${generateGrowthIndicator(revenueGrowth, language)}</div>
          <div class="insight-description">
            ${getTranslatedText('Previous Period', language)}: ${formatCurrency(previousRevenue || 0, language)}
          </div>
        </div>
        <div class="insight-card">
          <div class="insight-title">${getTranslatedText('Orders Growth', language)}</div>
          <div class="insight-value">${generateGrowthIndicator(ordersGrowth, language)}</div>
          <div class="insight-description">
            ${getTranslatedText('Previous Period', language)}: ${formatNumber(previousOrders || 0, language)}
          </div>
        </div>
        <div class="insight-card">
          <div class="insight-title">${getTranslatedText('Performance Indicators', language)}</div>
          <div class="insight-value">
            ${revenueGrowth > 0 && ordersGrowth > 0 ? '📈' : revenueGrowth < 0 || ordersGrowth < 0 ? '📉' : '📊'}
          </div>
          <div class="insight-description">
            ${revenueGrowth > 0 && ordersGrowth > 0 ?
              getTranslatedText('Strong Growth', language) :
              revenueGrowth < 0 || ordersGrowth < 0 ?
                getTranslatedText('Needs Attention', language) :
                getTranslatedText('Stable Performance', language)
            }
          </div>
        </div>
      </div>
    </div>
  `;
};

/**
 * Generate performance insights section
 */
const generatePerformanceInsightsSection = (data, language) => {
  const { orderStatusDistribution, topProducts, categoryPerformance } = data;

  if (!orderStatusDistribution && !topProducts && !categoryPerformance) return '';

  return `
    <div class="section">
      <div class="section-title">${getTranslatedText('Performance Insights', language)}</div>

      ${orderStatusDistribution && orderStatusDistribution.length > 0 ? `
        <div class="chart-placeholder">
          <strong>${getTranslatedText('Order Status Distribution', language)}</strong><br>
          ${orderStatusDistribution.map(status =>
            `${getTranslatedText(status.status, language)}: ${formatNumber(status.count, language)}`
          ).join(' | ')}
        </div>
      ` : ''}

      ${generateTopProductsTable(topProducts, language)}
      ${generateCategoryPerformanceTable(categoryPerformance, language)}
    </div>
  `;
};

/**
 * Generate orders section
 */
const generateOrdersSection = (allOrders, reportType, language) => {
  console.log(`🔍 generateOrdersSection called with reportType: ${reportType}, allOrders count: ${allOrders ? allOrders.length : 'null/undefined'}`);

  if (reportType !== 'overview' && reportType !== 'sales') {
    console.log(`❌ Orders section skipped - reportType ${reportType} not supported`);
    return '';
  }
  if (!allOrders || allOrders.length === 0) {
    console.log(`❌ Orders section skipped - no orders data (allOrders: ${allOrders ? 'empty array' : 'null/undefined'})`);
    return '';
  }

  // Sort orders by date (newest first) and show all orders
  const sortedOrders = [...allOrders].sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate));

  const rows = sortedOrders.map(order => {
    const customerName = order.customer
      ? `${order.customer.firstName || ''} ${order.customer.lastName || ''}`.trim()
      : 'N/A';

    // Calculate total items count
    const itemsCount = order.orderItems
      ? order.orderItems.reduce((total, item) => total + (item.quantity || 0), 0)
      : 0;

    return `
      <tr>
        <td>#${formatNumber(order.id, language)}</td>
        <td>${customerName}</td>
        <td>${formatDate(order.orderDate, language)}</td>
        <td>${formatNumber(itemsCount, language)}</td>
        <td>${formatCurrency(order.totalAmount, language)}</td>
        <td><span class="status ${order.status}">${getTranslatedText(order.status, language)}</span></td>
      </tr>
    `;
  }).join('');

  const orderCountText = language === 'ar'
    ? `جميع الطلبات (${formatNumber(sortedOrders.length, language)} طلب)`
    : `All Orders (${formatNumber(sortedOrders.length, language)} orders)`;

  console.log(`✅ Orders section generated successfully with ${sortedOrders.length} orders for ${language} language`);

  return `
    <div class="section">
      <div class="section-title">${orderCountText}</div>
      <table class="table">
        <thead>
          <tr>
            <th>${getTranslatedText('Order ID', language)}</th>
            <th>${getTranslatedText('Customer', language)}</th>
            <th>${getTranslatedText('Date', language)}</th>
            <th>${getTranslatedText('Items', language)}</th>
            <th>${getTranslatedText('Amount', language)}</th>
            <th>${getTranslatedText('Status', language)}</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    </div>
  `;
};

/**
 * Generate customer section
 */
const generateCustomerSection = (customerStats, newCustomersThisMonth, reportType, language, customerSegmentation = []) => {
  if (reportType !== 'customers') return '';

  const topCustomersTable = customerSegmentation && customerSegmentation.length > 0 ? `
    <div style="margin-top: 20px;">
      <h4>${getTranslatedText('Top Customers', language)}</h4>
      <table class="table">
        <thead>
          <tr>
            <th>${getTranslatedText('Customer Name', language)}</th>
            <th>${getTranslatedText('Email', language)}</th>
            <th>${getTranslatedText('Orders Count', language)}</th>
            <th>${getTranslatedText('Total Spent', language)}</th>
          </tr>
        </thead>
        <tbody>
          ${customerSegmentation.slice(0, 10).map(customer => `
            <tr>
              <td>${customer.firstName} ${customer.lastName}</td>
              <td>${customer.email}</td>
              <td>${formatNumber(customer.orderCount || 0, language)}</td>
              <td>${formatCurrency(customer.totalSpent || 0, language)}</td>
            </tr>
          `).join('')}
        </tbody>
      </table>
    </div>
  ` : '';

  return `
    <div class="section">
      <div class="section-title">${getTranslatedText('Customer Analytics', language)}</div>
      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-label">${getTranslatedText('Total Customers', language)}</div>
          <div class="metric-value">${formatNumber(customerStats || 0, language)}</div>
        </div>
        <div class="metric-card">
          <div class="metric-label">${getTranslatedText('New Customers (Last 30 days)', language)}</div>
          <div class="metric-value">${formatNumber(newCustomersThisMonth || 0, language)}</div>
        </div>
      </div>
      ${topCustomersTable}
    </div>
  `;
};

/**
 * Generate top products table
 */
const generateTopProductsTable = (topProducts, language) => {
  if (!topProducts || topProducts.length === 0) return '';

  const rows = topProducts.slice(0, 10).map(product => `
    <tr>
      <td>${product.name}</td>
      <td>${product.category}</td>
      <td>${formatNumber(product.totalSold || 0, language)}</td>
      <td>${formatCurrency(product.totalRevenue || 0, language)}</td>
      <td>${formatNumber(product.stockQuantity || 0, language)}</td>
    </tr>
  `).join('');

  return `
    <div style="margin-top: 20px;">
      <h4>${getTranslatedText('Top Performing Products', language)}</h4>
      <table class="table">
        <thead>
          <tr>
            <th>${getTranslatedText('Product Name', language)}</th>
            <th>${getTranslatedText('Category', language)}</th>
            <th>${getTranslatedText('Units Sold', language)}</th>
            <th>${getTranslatedText('Revenue', language)}</th>
            <th>${getTranslatedText('Stock', language)}</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    </div>
  `;
};

/**
 * Generate category performance table
 */
const generateCategoryPerformanceTable = (categoryPerformance, language) => {
  if (!categoryPerformance || categoryPerformance.length === 0) return '';

  const rows = categoryPerformance.map(category => `
    <tr>
      <td>${category.category}</td>
      <td>${formatNumber(category.productCount || 0, language)}</td>
      <td>${formatNumber(category.totalSold || 0, language)}</td>
      <td>${formatCurrency(category.totalRevenue || 0, language)}</td>
    </tr>
  `).join('');

  return `
    <div style="margin-top: 20px;">
      <h4>${getTranslatedText('Category Performance', language)}</h4>
      <table class="table">
        <thead>
          <tr>
            <th>${getTranslatedText('Category', language)}</th>
            <th>${getTranslatedText('Products Count', language)}</th>
            <th>${getTranslatedText('Total Sold', language)}</th>
            <th>${getTranslatedText('Revenue', language)}</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    </div>
  `;
};

/**
 * Generate product section
 */
const generateProductSection = (totalProducts, lowStockProducts, outOfStockProducts, reportType, language) => {
  if (reportType !== 'products') return '';

  return `
    <div class="section">
      <div class="section-title">${getTranslatedText('Product Analytics', language)}</div>
      <div class="metrics-grid">
        <div class="metric-card">
          <div class="metric-label">${getTranslatedText('Total Products', language)}</div>
          <div class="metric-value">${formatNumber(totalProducts || 0, language)}</div>
        </div>
        <div class="metric-card">
          <div class="metric-label">${getTranslatedText('Low Stock Products', language)}</div>
          <div class="metric-value">${formatNumber(lowStockProducts || 0, language)}</div>
        </div>
        <div class="metric-card">
          <div class="metric-label">${getTranslatedText('Out of Stock Products', language)}</div>
          <div class="metric-value">${formatNumber(outOfStockProducts || 0, language)}</div>
        </div>
      </div>
    </div>
  `;
};

/**
 * Generate inventory alerts section
 */
const generateInventoryAlertsSection = (inventoryAlerts, reportType, language) => {
  if (reportType !== 'products' && reportType !== 'overview') return '';
  if (!inventoryAlerts || inventoryAlerts.length === 0) return '';

  const rows = inventoryAlerts.map(product => `
    <tr>
      <td>${product.name}</td>
      <td>${product.category}</td>
      <td>${formatNumber(product.stockQuantity || 0, language)}</td>
      <td>${formatCurrency(product.price || 0, language)}</td>
      <td>
        <span class="status ${product.stockQuantity <= 0 ? 'cancelled' : product.stockQuantity <= 5 ? 'pending' : 'processing'}">
          ${product.stockQuantity <= 0 ?
            getTranslatedText('Out of Stock', language) :
            product.stockQuantity <= 5 ?
              getTranslatedText('Low Stock', language) :
              getTranslatedText('Normal', language)
          }
        </span>
      </td>
    </tr>
  `).join('');

  return `
    <div class="section">
      <div class="section-title">${getTranslatedText('Inventory Alerts', language)}</div>
      <table class="table">
        <thead>
          <tr>
            <th>${getTranslatedText('Product Name', language)}</th>
            <th>${getTranslatedText('Category', language)}</th>
            <th>${getTranslatedText('Stock Quantity', language)}</th>
            <th>${getTranslatedText('Price', language)}</th>
            <th>${getTranslatedText('Status', language)}</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    </div>
  `;
};

module.exports = {
  generateCSS,
  getTranslatedText,
  formatCurrency,
  formatNumber,
  formatDate,
  generateAnalyticsHTML,
  arabicTranslations
};
